// English Comments:
// Get references to all necessary DOM elements
const imageUpload = document.getElementById('imageUpload');
const imagePreviewContainer = document.getElementById('imagePreviewContainer');
const imagePreviewGrid = document.getElementById('imagePreviewGrid');
const statusArea = document.getElementById('statusArea');
const loadingSpinner = document.getElementById('loadingSpinner');
const statusMessage = document.getElementById('statusMessage');
const identifiedItemsContainer = document.getElementById('identifiedItemsContainer');
const identifiedItemsText = document.getElementById('identifiedItemsText');
const aiPriceSuggestionContainer = document.getElementById('aiPriceSuggestionContainer');
const aiPriceSuggestionText = document.getElementById('aiPriceSuggestionText');
const adContainer = document.getElementById('adContainer');
const adTitleInput = document.getElementById('adTitle');
const adBodyTextarea = document.getElementById('adBody');
const copyAdButton = document.getElementById('copyAdButton');
const regenerateAdCreativeBtn = document.getElementById('regenerateAdCreativeBtn');
const toastNotification = document.getElementById('toastNotification');
const previousAdVersionBtn = document.getElementById('previousAdVersionBtn');
const nextAdVersionBtn = document.getElementById('nextAdVersionBtn');
const adVersionInfo = document.getElementById('adVersionInfo');
const suggestTitlesBtn = document.getElementById('suggestTitlesBtn');
const alternativeTitlesContainer = document.getElementById('alternativeTitlesContainer');
const alternativeTitlesList = document.getElementById('alternativeTitlesList');
const suggestKeywordsBtn = document.getElementById('suggestKeywordsBtn');
const keywordsContainer = document.getElementById('keywordsContainer');
const keywordsText = document.getElementById('keywordsText');

// Settings Modal Elements
const menuIcon = document.getElementById('menuIcon');
const settingsModalOverlay = document.getElementById('settingsModalOverlay');
const closeSettingsModalBtn = document.getElementById('closeSettingsModalBtn');
const modalLangDeBtn = document.getElementById('modal-lang-de');
const modalLangEnBtn = document.getElementById('modal-lang-en');
const modalLangViBtn = document.getElementById('modal-lang-vi');

// AI Content Language Buttons
const aiContentLangDeBtn = document.getElementById('aiContentLang-de');
const aiContentLangEnBtn = document.getElementById('aiContentLang-en');
const aiContentLangViBtn = document.getElementById('aiContentLang-vi');

// Global variables
let base64ImageObjects = []; // Stores {mimeType, data} for uploaded images
let currentIdentifiedItems = ""; // Stores the text description of identified items
const MAX_IMAGES = 5; // Maximum number of images allowed for upload


let adHistory = []; // Stores generated ad versions {title, body}
let currentAdHistoryIndex = -1; // Index for the currently displayed ad in history
let currentAppLanguage = 'de'; // Default UI language
let currentAiContentLanguage = 'de'; // Default language for AI-generated content

// --- Translations Object ---
// This object holds all UI strings for different languages.
// Prompts for the AI are also included here and will be selected based on currentAiContentLanguage.
const translations = {
    "de": {
        "menuLabel": "Men√º",
        "settingsTitle": "Einstellungen",
        "closeBtn": "Schlie√üen",
        "appLangLabel": "App-Sprache:",
        "appTitle": "üì∏ eBay Kleinanzeigen Helfer AI",
        "appSubtitle": "Mehrere Fotos hochladen, Dinge erkennen & Preis vorschlagen lassen! (via Google Gemini)",
        "uploadLabel": "1. Bilder hochladen (bis zu 5; bevorzugt: PNG, JPG, WEBP, GIF):",
        "imagePreviewTitle": "Vorschau der Bilder:",
        "identifiedItemsTitle": "üîç Erkannte Gegenst√§nde (aus allen Bildern):",
        "priceSuggestionTitle": "üí∞ KI Preisvorschlag (basierend auf Analyse):",
        "priceSuggestionDisclaimer": "Dies ist ein Sch√§tzwert basierend auf KI-Analyse und simuliertem Vergleich.",
        "aiContentLangLabel": "Sprache f√ºr KI-generierten Inhalt:",
        "generatedAdTitle": "üìù Generierte eBay Kleinanzeige:",
        "adFieldTitle": "Titel:",
        "suggestTitlesBtn": "‚ú® Andere Titelideen",
        "alternativeTitlesHeader": "Alternative Titelvorschl√§ge:",
        "adFieldBody": "Anzeigentext:",
        "prevVersionBtn": "< Vorherige",
        "versionInfoBase": "Version",
        "nextVersionBtn": "N√§chste >",
        "copyAdBtn": "Anzeige kopieren",
        "newCreativeBtn": "‚ú® Neue kreative Version",
        "suggestKeywordsBtn": "‚ú® Keywords & Hashtags vorschlagen",
        "keywordsTitle": "üîë Vorgeschlagene Keywords & Hashtags:",
        "errorPrefix": "Fehler: ",
        "statusLoadingImages": "Lade {count} Bilder...",
        "statusIdentifyingItems": "Analysiere {count} Bilder...",
        "statusItemsIdentified": "Gegenst√§nde erkannt!",
        "statusSuggestingPrice": "Ermittle Preisvorschlag...",
        "statusPriceSuggested": "Preisvorschlag erhalten! Erstelle jetzt die Standardanzeige...",
        "statusGeneratingAd": "Erstelle eBay Kleinanzeigen Text...",
        "statusGeneratingCreativeAd": "Erstelle neue kreative Version...",
        "statusAdGenerated": "Anzeige erfolgreich generiert!",
        "statusCreativeAdGenerated": "Neue kreative Version generiert!",
        "statusSuggestingTitles": "Schlage alternative Titel vor...",
        "statusTitlesSuggested": "Alternative Titelvorschl√§ge geladen.",
        "statusNoAlternativeTitles": "Konnte keine alternativen Titel finden.",
        "statusSuggestingKeywords": "Schlage Keywords & Hashtags vor...",
        "statusKeywordsSuggested": "Keywords & Hashtags vorgeschlagen.",
        "toastAdCopied": "Anzeige & Infos kopiert!",
        "toastCopyFailed": "Kopieren fehlgeschlagen.",
        "toastTitleUpdated": "Titel aktualisiert!",
        "toastAiLangChanged": "Sprache f√ºr KI-Inhalt ge√§ndert. Standardanzeige wird neu generiert...",
        "toastAiLangNoItems": "Sprache f√ºr KI-Inhalt f√ºr zuk√ºnftige Anzeigen ge√§ndert.",
        "errorMaxImages": "Bitte maximal {max} Bilder ausw√§hlen.",
        "errorReadingFile": "Fehler beim Lesen von Datei {fileName}: {errorMessage}",
        "errorNoImagesToAnalyze": "Keine Bilder zum Analysieren vorhanden.",
        "errorImageIdentification": "Ein Fehler ist bei der Bilderkennung aufgetreten.",
        "errorNoItemsForPrice": "Keine (oder fehlerhafte) Gegenstandserkennung f√ºr Preisvorschlag vorhanden.",
        "errorPriceSuggestionFailed": "Preisvorschlag fehlgeschlagen.",
        "errorPriceSuggestionNotPossible": "Preisvorschlag nicht m√∂glich ohne klare Gegenstandserkennung.",
        "errorNoItemsForAd": "Keine g√ºltigen Gegenst√§nde f√ºr Anzeigenerstellung identifiziert.",
        "errorAdGeneration": "Ein Fehler ist bei der Anzeigenerstellung aufgetreten.",
        "errorEmptyAdResponse": "KI konnte keine Anzeige erstellen (leere Antwort).",
        "errorEmptyCreativeAdResponse": "KI konnte keine neue kreative Version erstellen (leere Antwort). Bestehende Anzeige wird beibehalten.",
        "errorSimilarCreativeAd": "KI hat eine √§hnliche kreative Version generiert. Aktuelle Anzeige bleibt bestehen.",
        "errorAdFormat": "Anzeige generiert (Formatierungsfehler).",
        "errorAdFormatCreative": "Formatierungsfehler bei kreativer Version. Bestehende Anzeige wird beibehalten.",
        "errorSuggestingTitles": "Fehler beim Vorschlagen alternativer Titel.",
        "errorSuggestingKeywords": "Fehler beim Vorschlagen von Keywords/Hashtags.",
        "errorNoAdForTitles": "Es muss zuerst eine Standardanzeige generiert werden, um Titel vorzuschlagen.",
        "errorNoAdForKeywords": "Es muss zuerst eine Anzeige generiert werden, um Keywords vorzuschlagen.",
        "errorNoAdContentForKeywords": "Aktuelle Anzeige hat keinen Titel oder Text f√ºr Keyword-Vorschl√§ge.",
        "errorApiKeyMissing": "Bitte zuerst den Google API Key im Skript eintragen.",
        "genericAdItems": "Diverse Artikel (Details siehe Bilder)",
        "langName": "Deutsch",
        "promptIdentifyItems": "Identifiziere die folgenden verkaufbaren Gegenst√§nde in den Bildern und liste sie auf. Erstelle eine einzige, koh√§rente Liste oder Beschreibung auf Deutsch. Beispiel: 'Ein rotes Fahrrad, ein gebrauchter Laptop mit Maus und eine Sammlung alter B√ºcher'. Konzentriere dich auf die Hauptobjekte.",
        "promptSuggestPrice": "Du bist ein KI-Assistent, der dabei hilft, realistische Verkaufspreise f√ºr Artikel auf eBay Kleinanzeigen in Deutschland zu finden. Basierend auf der folgenden Beschreibung von Gegenst√§nden: '{items}'. Angenommen, die Artikel sind in 'gutem gebrauchten Zustand'. Schlage bitte einen wettbewerbsf√§higen Verkaufspreis oder eine Preisspanne in EUR vor. Wenn du Faktoren oder Details auflistest, verwende bitte Spiegelstriche (-) oder Aufz√§hlungspunkte (.) am Zeilenanfang und vermeide Fettformatierung. Tue so, als h√§ttest du √§hnliche aktuelle Angebote auf Kleinanzeigen recherchiert. Antworte pr√§gnant auf Deutsch.",
        "promptGenerateAd": "Du bist ein Experte f√ºr das Schreiben von Verkaufsanzeigen f√ºr eBay Kleinanzeigen in Deutschland. Basierend auf der folgenden Artikelbeschreibung: '{items}', und unter Ber√ºcksichtigung des zuvor vorgeschlagenen Preises (den du nicht explizit nennen sollst, aber der den Wert widerspiegelt), erstelle eine attraktive und informative Verkaufsanzeige auf Deutsch. Antworte AUSSCHLIESSLICH mit einem JSON-Objekt, das die Felder \"titel\" und \"anzeigentext\" enth√§lt. Formatiere deine Antwort exakt so:\n{\n  \"titel\": \"Ein passender Titel f√ºr die Anzeige (max. 65 Zeichen) auf Deutsch\",\n  \"anzeigentext\": \"Der vollst√§ndige Anzeigentext auf Deutsch. Erw√§hne den Zustand. F√ºge einen freundlichen Call-to-Action hinzu. Erw√§hne keinen Preis explizit im Text.\"\n}\nArtikelbeschreibung: '{items}'",
        "promptGenerateCreativeAd": "Du bist ein Experte f√ºr das Schreiben von Verkaufsanzeigen f√ºr eBay Kleinanzeigen in Deutschland. Basierend auf der folgenden Artikelbeschreibung: '{items}', und unter Ber√ºcksichtigung des zuvor vorgeschlagenen Preises (den du nicht explizit nennen sollst, aber der den Wert widerspiegelt), erstelle eine BESONDERS KREATIVE und AUFMERKSAMKEITSERREGENDE Verkaufsanzeige auf Deutsch. Sei ruhig etwas witzig oder originell, aber bleibe seri√∂s genug f√ºr einen Verkauf. Antworte AUSSCHLIESSLICH mit einem JSON-Objekt, das die Felder \"titel\" und \"anzeigentext\" enth√§lt. Formatiere deine Antwort exakt so:\n{\n  \"titel\": \"Ein kreativer Titel f√ºr die Anzeige (max. 65 Zeichen) auf Deutsch\",\n  \"anzeigentext\": \"Der kreative Anzeigentext auf Deutsch. Erw√§hne den Zustand. F√ºge einen originellen Call-to-Action hinzu. Erw√§hne keinen Preis explizit im Text.\"\n}\nArtikelbeschreibung: '{items}'",
        "promptSuggestTitles": "Basierend auf den erkannten Artikeln: '{items}' und dem aktuellen Anzeigentitel: '{currentTitle}', schlage 3-4 alternative, pr√§gnante und attraktive Titel (maximal 65 Zeichen pro Titel) f√ºr eine eBay Kleinanzeigen-Anzeige auf Deutsch vor. Liste nur die neuen Titel auf, jeden in einer neuen Zeile. Gib keine zus√§tzliche Erkl√§rung oder Einleitung.",
        "promptSuggestKeywords": "Schlage 5-7 relevante Keywords (durch Kommas getrennt) UND 3-5 passende Hashtags (jeweils mit # beginnend und durch Leerzeichen getrennt) f√ºr eine eBay Kleinanzeigen-Anzeige auf Deutsch mit dem Titel '{title}' und der Beschreibung '{body}' vor. Formatiere die Antwort klar und deutlich, zum Beispiel so:\nKeywords: Keyword1, Keyword2, Keyword3\nHashtags: #Hashtag1 #Hashtag2"
    },
    "en": {
        "menuLabel": "Menu",
        "settingsTitle": "Settings",
        "closeBtn": "Close",
        "appLangLabel": "App Language:",
        "appTitle": "üì∏ eBay Classifieds Helper AI",
        "appSubtitle": "Upload multiple photos, let AI identify items & suggest a price! (via Google Gemini)",
        "uploadLabel": "1. Upload images (up to 5; preferred: PNG, JPG, WEBP, GIF):",
        "imagePreviewTitle": "Image Preview:",
        "identifiedItemsTitle": "üîç Identified Items (from all images):",
        "priceSuggestionTitle": "üí∞ AI Price Suggestion (based on analysis):",
        "priceSuggestionDisclaimer": "This is an estimate based on AI analysis and simulated comparison.",
        "aiContentLangLabel": "Language for AI-generated content:",
        "generatedAdTitle": "üìù Generated eBay Classifieds Ad:",
        "adFieldTitle": "Title:",
        "suggestTitlesBtn": "‚ú® Suggest Titles",
        "alternativeTitlesHeader": "Alternative Title Suggestions:",
        "adFieldBody": "Ad Text:",
        "prevVersionBtn": "< Previous",
        "versionInfoBase": "Version",
        "nextVersionBtn": "Next >",
        "copyAdBtn": "Copy Ad",
        "newCreativeBtn": "‚ú® New Creative Version",
        "suggestKeywordsBtn": "‚ú® Suggest Keywords & Hashtags",
        "keywordsTitle": "üîë Suggested Keywords & Hashtags:",
        "errorPrefix": "Error: ",
        "statusLoadingImages": "Loading {count} image(s)...",
        "statusIdentifyingItems": "Analyzing {count} image(s)...",
        "statusItemsIdentified": "Items identified!",
        "statusSuggestingPrice": "Suggesting price...",
        "statusPriceSuggested": "Price suggested! Now generating standard ad...",
        "statusGeneratingAd": "Generating eBay Classifieds ad...",
        "statusGeneratingCreativeAd": "Generating new creative version...",
        "statusAdGenerated": "Ad successfully generated!",
        "statusCreativeAdGenerated": "New creative version generated!",
        "statusSuggestingTitles": "Suggesting alternative titles...",
        "statusTitlesSuggested": "Alternative titles loaded.",
        "statusNoAlternativeTitles": "Could not find alternative titles.",
        "statusSuggestingKeywords": "Suggesting keywords & hashtags...",
        "statusKeywordsSuggested": "Keywords & hashtags suggested.",
        "toastAdCopied": "Ad & info copied to clipboard!",
        "toastCopyFailed": "Copying failed.",
        "toastTitleUpdated": "Title updated!",
        "toastAiLangChanged": "AI content language changed. Standard ad will be regenerated...",
        "toastAiLangNoItems": "AI content language changed for future ads.",
        "errorMaxImages": "Please select a maximum of {max} images.",
        "errorReadingFile": "Error reading file {fileName}: {errorMessage}",
        "errorNoImagesToAnalyze": "No images available to analyze.",
        "errorImageIdentification": "An error occurred during image identification.",
        "errorNoItemsForPrice": "No (or faulty) item identification for price suggestion.",
        "errorPriceSuggestionFailed": "Price suggestion failed.",
        "errorPriceSuggestionNotPossible": "Price suggestion not possible without clear item identification.",
        "errorNoItemsForAd": "No valid items identified for ad generation.",
        "errorAdGeneration": "An error occurred during ad generation.",
        "errorEmptyAdResponse": "AI could not create an ad (empty response).",
        "errorEmptyCreativeAdResponse": "AI could not create a new creative version (empty response). Existing ad maintained.",
        "errorSimilarCreativeAd": "AI generated a similar creative version. Current ad maintained.",
        "errorAdFormat": "Ad generated (formatting error).",
        "errorAdFormatCreative": "Formatting error in creative version. Existing ad maintained.",
        "errorSuggestingTitles": "Error suggesting alternative titles.",
        "errorSuggestingKeywords": "Error suggesting keywords/hashtags.",
        "errorNoAdForTitles": "A standard ad must be generated first to suggest titles.",
        "errorNoAdForKeywords": "An ad must be generated first to suggest keywords.",
        "errorNoAdContentForKeywords": "Current ad has no title or text for keyword suggestions.",
        "errorApiKeyMissing": "Please enter your Google API Key in the script first.",
        "genericAdItems": "Various items (see pictures)",
        "langName": "English",
        "promptIdentifyItems": "Identify the following sellable items in the images and list them. Create a single, coherent list or description in English. Example: 'A red bicycle, a used laptop with a mouse, and a collection of old books'. Focus on the main items.",
        "promptSuggestPrice": "You are an AI assistant helping to find realistic selling prices for items on eBay Kleinanzeigen in Germany. Based on the following description of items: '{items}'. Assume the items are in 'good used condition' unless the description implies otherwise. Please suggest a competitive selling price or price range in EUR. If you list factors or details, please use hyphens (-) or bullet points (.) at the beginning of the line and avoid bold formatting (e.g., no ** **). Act as if you have researched similar current listings on Kleinanzeigen. Respond concisely in English.",
        "promptGenerateAd": "You are an expert in writing sales ads for eBay Kleinanzeigen in Germany. Based on the following item description: '{items}', and considering the previously suggested price (which you should not explicitly state, but which reflects the value), create an attractive and informative sales ad in English. Respond EXCLUSIVELY with a JSON object containing the fields \"titel\" and \"anzeigentext\". Format your response exactly like this:\n{\n  \"titel\": \"A suitable title for the ad (max. 65 characters) in English\",\n  \"anzeigentext\": \"The complete ad text in English. Mention the condition. Add a friendly call to action. Do not explicitly mention a price in the text.\"\n}\nItem description: '{items}'",
        "promptGenerateCreativeAd": "You are an expert in writing sales ads for eBay Kleinanzeigen in Germany. Based on the following item description: '{items}', and considering the previously suggested price (which you should not explicitly state, but which reflects the value), create an ESPECIALLY CREATIVE and EYE-CATCHING sales ad in English. Feel free to be a bit witty or original, but remain professional enough for a sale. Respond EXCLUSIVELY with a JSON object containing the fields \"titel\" and \"anzeigentext\". Format your response exactly like this:\n{\n  \"titel\": \"A creative title for the ad (max. 65 characters) in English\",\n  \"anzeigentext\": \"The creative ad text in English. Mention the condition. Add an original call to action. Do not explicitly mention a price in the text.\"\n}\nItem description: '{items}'",
        "promptSuggestTitles": "Based on the identified items: '{items}' and the current ad title: '{currentTitle}', suggest 3-4 alternative, concise, and attractive titles (maximum 65 characters per title) for an eBay Kleinanzeigen ad in English. List only the new titles, each on a new line. Provide no additional explanation or introduction.",
        "promptSuggestKeywords": "Suggest 5-7 relevant keywords (comma-separated) AND 3-5 suitable hashtags (each starting with # and space-separated) for an eBay Kleinanzeigen ad in English with the title '{title}' and description '{body}'. Format the response clearly, for example:\nKeywords: Keyword1, Keyword2, Keyword3\nHashtags: #Hashtag1 #Hashtag2"
    },
    "vi": {
        "menuLabel": "Tr√¨nh ƒë∆°n",
        "settingsTitle": "C√†i ƒë·∫∑t",
        "closeBtn": "ƒê√≥ng",
        "appLangLabel": "Ng√¥n ng·ªØ App:",
        "appTitle": "üì∏ Tr·ª£ l√Ω AI cho eBay Kleinanzeigen",
        "appSubtitle": "T·∫£i l√™n nhi·ªÅu ·∫£nh, ƒë·ªÉ AI nh·∫≠n d·∫°ng v·∫≠t ph·∫©m & g·ª£i √Ω gi√°! (qua Google Gemini)",
        "uploadLabel": "1. T·∫£i l√™n h√¨nh ·∫£nh (t·ªëi ƒëa 5; ∆∞u ti√™n: PNG, JPG, WEBP, GIF):",
        "imagePreviewTitle": "Xem tr∆∞·ªõc h√¨nh ·∫£nh:",
        "identifiedItemsTitle": "üîç C√°c m·ª•c ƒë√£ x√°c ƒë·ªãnh (t·ª´ t·∫•t c·∫£ h√¨nh ·∫£nh):",
        "priceSuggestionTitle": "üí∞ ƒê·ªÅ xu·∫•t gi√° AI (d·ª±a tr√™n ph√¢n t√≠ch):",
        "priceSuggestionDisclaimer": "ƒê√¢y l√† ∆∞·ªõc t√≠nh d·ª±a tr√™n ph√¢n t√≠ch AI v√† so s√°nh m√¥ ph·ªèng.",
        "aiContentLangLabel": "Ng√¥n ng·ªØ cho n·ªôi dung do AI t·∫°o:",
        "generatedAdTitle": "üìù Qu·∫£ng c√°o eBay Kleinanzeigen ƒë√£ t·∫°o:",
        "adFieldTitle": "Ti√™u ƒë·ªÅ:",
        "suggestTitlesBtn": "‚ú® √ù t∆∞·ªüng ti√™u ƒë·ªÅ kh√°c",
        "alternativeTitlesHeader": "ƒê·ªÅ xu·∫•t ti√™u ƒë·ªÅ thay th·∫ø:",
        "adFieldBody": "N·ªôi dung qu·∫£ng c√°o:",
        "prevVersionBtn": "< Tr∆∞·ªõc",
        "versionInfoBase": "Phi√™n b·∫£n",
        "nextVersionBtn": "Ti·∫øp >",
        "copyAdBtn": "Sao ch√©p qu·∫£ng c√°o",
        "newCreativeBtn": "‚ú® Phi√™n b·∫£n s√°ng t·∫°o m·ªõi",
        "suggestKeywordsBtn": "‚ú® ƒê·ªÅ xu·∫•t T·ª´ kh√≥a & Hashtag",
        "keywordsTitle": "üîë T·ª´ kh√≥a & Hashtag ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:",
        "errorPrefix": "L·ªói: ",
        "statusLoadingImages": "ƒêang t·∫£i {count} h√¨nh ·∫£nh...",
        "statusIdentifyingItems": "ƒêang ph√¢n t√≠ch {count} h√¨nh ·∫£nh...",
        "statusItemsIdentified": "ƒê√£ x√°c ƒë·ªãnh c√°c m·ª•c!",
        "statusSuggestingPrice": "ƒêang ƒë·ªÅ xu·∫•t gi√°...",
        "statusPriceSuggested": "ƒê√£ ƒë·ªÅ xu·∫•t gi√°! B√¢y gi·ªù ƒëang t·∫°o qu·∫£ng c√°o ti√™u chu·∫©n...",
        "statusGeneratingAd": "ƒêang t·∫°o qu·∫£ng c√°o eBay Kleinanzeigen...",
        "statusGeneratingCreativeAd": "ƒêang t·∫°o phi√™n b·∫£n s√°ng t·∫°o m·ªõi...",
        "statusAdGenerated": "ƒê√£ t·∫°o qu·∫£ng c√°o th√†nh c√¥ng!",
        "statusCreativeAdGenerated": "ƒê√£ t·∫°o phi√™n b·∫£n s√°ng t·∫°o m·ªõi!",
        "statusSuggestingTitles": "ƒêang ƒë·ªÅ xu·∫•t ti√™u ƒë·ªÅ thay th·∫ø...",
        "statusTitlesSuggested": "ƒê√£ t·∫£i ƒë·ªÅ xu·∫•t ti√™u ƒë·ªÅ thay th·∫ø.",
        "statusNoAlternativeTitles": "Kh√¥ng t√¨m th·∫•y ti√™u ƒë·ªÅ thay th·∫ø.",
        "statusSuggestingKeywords": "ƒêang ƒë·ªÅ xu·∫•t t·ª´ kh√≥a & hashtag...",
        "statusKeywordsSuggested": "ƒê√£ ƒë·ªÅ xu·∫•t t·ª´ kh√≥a & hashtag.",
        "toastAdCopied": "ƒê√£ sao ch√©p qu·∫£ng c√°o & th√¥ng tin v√†o b·ªô nh·ªõ t·∫°m!",
        "toastCopyFailed": "Sao ch√©p th·∫•t b·∫°i.",
        "toastTitleUpdated": "ƒê√£ c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ!",
        "toastAiLangChanged": "Ng√¥n ng·ªØ n·ªôi dung AI ƒë√£ thay ƒë·ªïi. Qu·∫£ng c√°o ti√™u chu·∫©n s·∫Ω ƒë∆∞·ª£c t·∫°o l·∫°i...",
        "toastAiLangNoItems": "Ng√¥n ng·ªØ n·ªôi dung AI ƒë√£ thay ƒë·ªïi cho c√°c qu·∫£ng c√°o trong t∆∞∆°ng lai.",
        "errorMaxImages": "Vui l√≤ng ch·ªçn t·ªëi ƒëa {max} h√¨nh ·∫£nh.",
        "errorReadingFile": "L·ªói ƒë·ªçc t·ªáp {fileName}: {errorMessage}",
        "errorNoImagesToAnalyze": "Kh√¥ng c√≥ h√¨nh ·∫£nh ƒë·ªÉ ph√¢n t√≠ch.",
        "errorImageIdentification": "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh nh·∫≠n d·∫°ng h√¨nh ·∫£nh.",
        "errorNoItemsForPrice": "Kh√¥ng c√≥ (ho·∫∑c l·ªói) nh·∫≠n d·∫°ng m·ª•c cho ƒë·ªÅ xu·∫•t gi√°.",
        "errorPriceSuggestionFailed": "ƒê·ªÅ xu·∫•t gi√° th·∫•t b·∫°i.",
        "errorPriceSuggestionNotPossible": "Kh√¥ng th·ªÉ ƒë·ªÅ xu·∫•t gi√° n·∫øu kh√¥ng c√≥ nh·∫≠n d·∫°ng m·ª•c r√µ r√†ng.",
        "errorNoItemsForAd": "Kh√¥ng c√≥ m·ª•c h·ª£p l·ªá n√†o ƒë∆∞·ª£c x√°c ƒë·ªãnh ƒë·ªÉ t·∫°o qu·∫£ng c√°o.",
        "errorAdGeneration": "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t·∫°o qu·∫£ng c√°o.",
        "errorEmptyAdResponse": "AI kh√¥ng th·ªÉ t·∫°o qu·∫£ng c√°o (ph·∫£n h·ªìi tr·ªëng).",
        "errorEmptyCreativeAdResponse": "AI kh√¥ng th·ªÉ t·∫°o phi√™n b·∫£n s√°ng t·∫°o m·ªõi (ph·∫£n h·ªìi tr·ªëng). Qu·∫£ng c√°o hi·ªán t·∫°i ƒë∆∞·ª£c gi·ªØ l·∫°i.",
        "errorSimilarCreativeAd": "AI ƒë√£ t·∫°o m·ªôt phi√™n b·∫£n s√°ng t·∫°o t∆∞∆°ng t·ª±. Qu·∫£ng c√°o hi·ªán t·∫°i ƒë∆∞·ª£c gi·ªØ l·∫°i.",
        "errorAdFormat": "Qu·∫£ng c√°o ƒë√£ t·∫°o (l·ªói ƒë·ªãnh d·∫°ng).",
        "errorAdFormatCreative": "L·ªói ƒë·ªãnh d·∫°ng trong phi√™n b·∫£n s√°ng t·∫°o. Qu·∫£ng c√°o hi·ªán t·∫°i ƒë∆∞·ª£c gi·ªØ l·∫°i.",
        "errorSuggestingTitles": "L·ªói ƒë·ªÅ xu·∫•t ti√™u ƒë·ªÅ thay th·∫ø.",
        "errorSuggestingKeywords": "L·ªói ƒë·ªÅ xu·∫•t t·ª´ kh√≥a/hashtag.",
        "errorNoAdForTitles": "Ph·∫£i t·∫°o qu·∫£ng c√°o ti√™u chu·∫©n tr∆∞·ªõc ƒë·ªÉ ƒë·ªÅ xu·∫•t ti√™u ƒë·ªÅ.",
        "errorNoAdForKeywords": "Ph·∫£i t·∫°o qu·∫£ng c√°o tr∆∞·ªõc ƒë·ªÉ ƒë·ªÅ xu·∫•t t·ª´ kh√≥a.",
        "errorNoAdContentForKeywords": "Qu·∫£ng c√°o hi·ªán t·∫°i kh√¥ng c√≥ ti√™u ƒë·ªÅ ho·∫∑c n·ªôi dung cho ƒë·ªÅ xu·∫•t t·ª´ kh√≥a.",
        "errorApiKeyMissing": "Vui l√≤ng nh·∫≠p Kh√≥a API Google c·ªßa b·∫°n v√†o t·∫≠p l·ªánh tr∆∞·ªõc.",
        "genericAdItems": "Nhi·ªÅu m·∫∑t h√†ng (xem chi ti·∫øt trong h√¨nh)",
        "langName": "Ti·∫øng Vi·ªát",
        "promptIdentifyItems": "X√°c ƒë·ªãnh c√°c m·∫∑t h√†ng c√≥ th·ªÉ b√°n ƒë∆∞·ª£c sau ƒë√¢y trong h√¨nh ·∫£nh v√† li·ªát k√™ ch√∫ng. T·∫°o m·ªôt danh s√°ch ho·∫∑c m√¥ t·∫£ m·∫°ch l·∫°c duy nh·∫•t b·∫±ng ti·∫øng Vi·ªát. V√≠ d·ª•: 'M·ªôt chi·∫øc xe ƒë·∫°p m√†u ƒë·ªè, m·ªôt m√°y t√≠nh x√°ch tay ƒë√£ qua s·ª≠ d·ª•ng v·ªõi chu·ªôt v√† m·ªôt b·ªô s∆∞u t·∫≠p s√°ch c≈©'. T·∫≠p trung v√†o c√°c m·ª•c ch√≠nh.",
        "promptSuggestPrice": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI gi√∫p t√¨m gi√° b√°n th·ª±c t·∫ø cho c√°c m·∫∑t h√†ng tr√™n eBay Kleinanzeigen ·ªü ƒê·ª©c. D·ª±a tr√™n m√¥ t·∫£ sau v·ªÅ c√°c m·∫∑t h√†ng: '{items}'. Gi·∫£ s·ª≠ c√°c m·∫∑t h√†ng ·ªü 't√¨nh tr·∫°ng ƒë√£ qua s·ª≠ d·ª•ng t·ªët' tr·ª´ khi m√¥ t·∫£ ng·ª• √Ω kh√°c. Vui l√≤ng ƒë·ªÅ xu·∫•t m·ªôt m·ª©c gi√° ho·∫∑c kho·∫£ng gi√° c·∫°nh tranh b·∫±ng EUR. N·∫øu b·∫°n li·ªát k√™ c√°c y·∫øu t·ªë ho·∫∑c chi ti·∫øt, vui l√≤ng s·ª≠ d·ª•ng d·∫•u g·∫°ch ngang (-) ho·∫∑c d·∫•u ƒë·∫ßu d√≤ng (.) ·ªü ƒë·∫ßu d√≤ng v√† tr√°nh ƒë·ªãnh d·∫°ng ƒë·∫≠m (v√≠ d·ª•: kh√¥ng c√≥ ** **). H√£y h√†nh ƒë·ªông nh∆∞ th·ªÉ b·∫°n ƒë√£ nghi√™n c·ª©u c√°c danh s√°ch hi·ªán t·∫°i t∆∞∆°ng t·ª± tr√™n Kleinanzeigen. Tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát.",
        "promptGenerateAd": "B·∫°n l√† chuy√™n gia vi·∫øt qu·∫£ng c√°o b√°n h√†ng cho eBay Kleinanzeigen ·ªü ƒê·ª©c. D·ª±a tr√™n m√¥ t·∫£ m·∫∑t h√†ng sau: '{items}', v√† xem x√©t gi√° ƒë·ªÅ xu·∫•t tr∆∞·ªõc ƒë√≥ (m√† b·∫°n kh√¥ng n√™n n√™u r√µ, nh∆∞ng ph·∫£n √°nh gi√° tr·ªã), h√£y t·∫°o m·ªôt qu·∫£ng c√°o b√°n h√†ng h·∫•p d·∫´n v√† nhi·ªÅu th√¥ng tin b·∫±ng ti·∫øng Vi·ªát. Tr·∫£ l·ªùi ƒê·ªòC QUY·ªÄN b·∫±ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON ch·ª©a c√°c tr∆∞·ªùng \"titel\" v√† \"anzeigentext\". ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ch√≠nh x√°c nh∆∞ sau:\n{\n  \"titel\": \"M·ªôt ti√™u ƒë·ªÅ ph√π h·ª£p cho qu·∫£ng c√°o (t·ªëi ƒëa 65 k√Ω t·ª±) b·∫±ng ti·∫øng Vi·ªát\",\n  \"anzeigentext\": \"To√†n b·ªô n·ªôi dung qu·∫£ng c√°o b·∫±ng ti·∫øng Vi·ªát. ƒê·ªÅ c·∫≠p ƒë·∫øn t√¨nh tr·∫°ng. Th√™m l·ªùi k√™u g·ªçi h√†nh ƒë·ªông th√¢n thi·ªán. Kh√¥ng ƒë·ªÅ c·∫≠p r√µ r√†ng ƒë·∫øn gi√° trong vƒÉn b·∫£n.\"\n}\nM√¥ t·∫£ m·∫∑t h√†ng: '{items}'",
        "promptGenerateCreativeAd": "B·∫°n l√† chuy√™n gia vi·∫øt qu·∫£ng c√°o b√°n h√†ng cho eBay Kleinanzeigen ·ªü ƒê·ª©c. D·ª±a tr√™n m√¥ t·∫£ m·∫∑t h√†ng sau: '{items}', v√† xem x√©t gi√° ƒë·ªÅ xu·∫•t tr∆∞·ªõc ƒë√≥ (m√† b·∫°n kh√¥ng n√™n n√™u r√µ, nh∆∞ng ph·∫£n √°nh gi√° tr·ªã), h√£y t·∫°o m·ªôt qu·∫£ng c√°o b√°n h√†ng ƒê·∫∂C BI·ªÜT S√ÅNG T·∫†O v√† THU H√öT S·ª∞ CH√ö √ù b·∫±ng ti·∫øng Vi·ªát. H√£y tho·∫£i m√°i h√†i h∆∞·ªõc ho·∫∑c ƒë·ªôc ƒë√°o m·ªôt ch√∫t, nh∆∞ng v·∫´n ƒë·ªß nghi√™m t√∫c ƒë·ªÉ b√°n h√†ng. Tr·∫£ l·ªùi ƒê·ªòC QUY·ªÄN b·∫±ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON ch·ª©a c√°c tr∆∞·ªùng \"titel\" v√† \"anzeigentext\". ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ch√≠nh x√°c nh∆∞ sau:\n{\n  \"titel\": \"M·ªôt ti√™u ƒë·ªÅ s√°ng t·∫°o cho qu·∫£ng c√°o (t·ªëi ƒëa 65 k√Ω t·ª±) b·∫±ng ti·∫øng Vi·ªát\",\n  \"anzeigentext\": \"N·ªôi dung qu·∫£ng c√°o s√°ng t·∫°o b·∫±ng ti·∫øng Vi·ªát. ƒê·ªÅ c·∫≠p ƒë·∫øn t√¨nh tr·∫°ng. Th√™m l·ªùi k√™u g·ªçi h√†nh ƒë·ªông ƒë·ªôc ƒë√°o. Kh√¥ng ƒë·ªÅ c·∫≠p r√µ r√†ng ƒë·∫øn gi√° trong vƒÉn b·∫£n.\"\n}\nM√¥ t·∫£ m·∫∑t h√†ng: '{items}'",
        "promptSuggestTitles": "D·ª±a tr√™n c√°c m·ª•c ƒë√£ x√°c ƒë·ªãnh: '{items}' v√† ti√™u ƒë·ªÅ qu·∫£ng c√°o hi·ªán t·∫°i: '{currentTitle}', ƒë·ªÅ xu·∫•t 3-4 ti√™u ƒë·ªÅ thay th·∫ø, ng·∫Øn g·ªçn v√† h·∫•p d·∫´n (t·ªëi ƒëa 65 k√Ω t·ª± m·ªói ti√™u ƒë·ªÅ) cho qu·∫£ng c√°o eBay Kleinanzeigen b·∫±ng ti·∫øng Vi·ªát. Ch·ªâ li·ªát k√™ c√°c ti√™u ƒë·ªÅ m·ªõi, m·ªói ti√™u ƒë·ªÅ tr√™n m·ªôt d√≤ng m·ªõi. Kh√¥ng cung c·∫•p gi·∫£i th√≠ch ho·∫∑c gi·ªõi thi·ªáu b·ªï sung.",
        "promptSuggestKeywords": "ƒê·ªÅ xu·∫•t 5-7 t·ª´ kh√≥a li√™n quan (ph√¢n t√°ch b·∫±ng d·∫•u ph·∫©y) V√Ä 3-5 hashtag ph√π h·ª£p (m·ªói hashtag b·∫Øt ƒë·∫ßu b·∫±ng # v√† ph√¢n t√°ch b·∫±ng d·∫•u c√°ch) cho qu·∫£ng c√°o eBay Kleinanzeigen b·∫±ng ti·∫øng Vi·ªát v·ªõi ti√™u ƒë·ªÅ '{title}' v√† m√¥ t·∫£ '{body}'. ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi r√µ r√†ng, v√≠ d·ª•:\nKeywords: Keyword1, Keyword2, Keyword3\nHashtags: #Hashtag1 #Hashtag2"
        }
    };


    // --- Language Switching Logic ---
    // Function to set the application's UI language
    function setAppLanguage(lang) {
        if (!translations[lang]) {
            console.error("App language not supported:", lang);
            return;
        }
        currentAppLanguage = lang;
        document.documentElement.lang = lang; 
        localStorage.setItem('appLanguage', lang);

        // Translate all elements with data-translate-key attribute
        document.querySelectorAll('[data-translate-key]').forEach(el => {
            const key = el.getAttribute('data-translate-key');
            if (translations[lang][key]) {
                if (el.id === 'adVersionInfo' && key === 'versionInfoBase') { 
                    const versionText = `${translations[lang][key]} ${currentAdHistoryIndex + 1}/${adHistory.length || 0}`;
                    el.textContent = versionText;
                } else {
                    el.textContent = translations[lang][key];
                }
            }
        });

        // Update active button style for app language in modal
        [modalLangDeBtn, modalLangEnBtn, modalLangViBtn].forEach(btn => {
            btn.classList.remove('active');
            if (btn.id === `modal-lang-${lang}`) {
                btn.classList.add('active');
            }
        });
        console.log("App language set to:", lang);
        
        // If items were already identified and price suggested, re-fetch them in the new app language.
        // Ad content (title, body) itself remains in its originally generated AI Content Language.
        if (currentIdentifiedItems && !identifiedItemsContainer.classList.contains('hidden')) {
            identifyItemsFromMultipleImages(); 
        }
    }

    // Function to set the language for AI-generated content (ad title, body, suggestions)
    function setAiContentLanguage(lang) {
        if (!translations[lang]) { 
            console.error("AI Content language not supported:", lang);
            return;
        }
        const previousAiContentLanguage = currentAiContentLanguage;
        currentAiContentLanguage = lang;
        localStorage.setItem('aiContentLanguage', lang);

        // Update active button style for AI content language
        [aiContentLangDeBtn, aiContentLangEnBtn, aiContentLangViBtn].forEach(btn => {
            btn.classList.remove('active');
            if (btn.id === `aiContentLang-${lang}`) {
                btn.classList.add('active');
            }
        });
        console.log("AI Content language set to:", lang);

        // If items are already identified and an ad history exists,
        // and the AI content language has actually changed,
        // clear ad history and regenerate the standard ad in the new AI content language.
        if (currentIdentifiedItems && adHistory.length > 0 && lang !== previousAiContentLanguage) {
            showToast("toastAiLangChanged"); 
            adHistory = []; 
            currentAdHistoryIndex = -1;
            adTitleInput.value = "";
            adBodyTextarea.value = "";
            alternativeTitlesContainer.classList.add('hidden');
            alternativeTitlesList.innerHTML = '';
            keywordsContainer.classList.add('hidden');
            keywordsText.innerHTML = '';
            updateAdNavigationButtons();
            generateEbayAd(currentIdentifiedItems, false); 
        } else if (currentIdentifiedItems && lang !== previousAiContentLanguage) {
             showToast("toastAiLangNoItems"); 
        }
    }

    // Settings Modal Logic
    menuIcon.addEventListener('click', () => {
        settingsModalOverlay.classList.add('active');
    });
    closeSettingsModalBtn.addEventListener('click', () => {
        settingsModalOverlay.classList.remove('active');
    });
    settingsModalOverlay.addEventListener('click', (event) => { 
        if (event.target === settingsModalOverlay) {
            settingsModalOverlay.classList.remove('active');
        }
    });

    // Event listeners for app language buttons in modal
    modalLangDeBtn.addEventListener('click', () => setAppLanguage('de'));
    modalLangEnBtn.addEventListener('click', () => setAppLanguage('en'));
    modalLangViBtn.addEventListener('click', () => setAppLanguage('vi'));

    // Event listeners for AI content language buttons
    aiContentLangDeBtn.addEventListener('click', () => setAiContentLanguage('de'));
    aiContentLangEnBtn.addEventListener('click', () => setAiContentLanguage('en'));
    aiContentLangViBtn.addEventListener('click', () => setAiContentLanguage('vi'));

    // Load saved languages or set defaults on page load
    document.addEventListener('DOMContentLoaded', () => {
        const savedAppLang = localStorage.getItem('appLanguage');
        if (savedAppLang && translations[savedAppLang]) {
            setAppLanguage(savedAppLang);
        } else {
            setAppLanguage('de'); 
        }

        const savedAiContentLang = localStorage.getItem('aiContentLanguage');
        if (savedAiContentLang && translations[savedAiContentLang]) {
            setAiContentLanguage(savedAiContentLang);
        } else {
            setAiContentLanguage(currentAppLanguage); // Default AI content lang to app lang initially
        }
    });


    // --- Core App Logic (adapted for language) ---
    // Handles image file selection
    imageUpload.addEventListener('change', async (event) => {
        if (GOOGLE_API_KEY === "YOUR_GOOGLE_API_KEY") { 
             showError(translations[currentAppLanguage].errorApiKeyMissing);
             return;
        }
        resetUIForNewImage();
        const files = event.target.files;

        if (files.length === 0) return;
        if (files.length > MAX_IMAGES) {
            showError(translations[currentAppLanguage].errorMaxImages.replace('{max}', MAX_IMAGES));
            imageUpload.value = ""; 
            return;
        }

        showLoading(translations[currentAppLanguage].statusLoadingImages.replace('{count}', files.length), "initial");
        base64ImageObjects = [];
        imagePreviewGrid.innerHTML = ''; 

        let filesProcessed = 0;
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            try {
                const dataUrl = await readFileAsDataURL(file);
                const { mimeType, data } = extractBase64Data(dataUrl);
                if (!mimeType || !data) {
                    throw new Error("Ung√ºltiges Bildformat oder Fehler beim Extrahieren der Daten."); // Should be translated or use a key
                }
                base64ImageObjects.push({ mimeType, data }); 

                const imgElement = document.createElement('img');
                imgElement.src = dataUrl; 
                imgElement.alt = `Vorschau ${i + 1}`;
                imgElement.classList.add('image-preview-item');
                imagePreviewGrid.appendChild(imgElement);
                
                filesProcessed++;
                if (filesProcessed === files.length) {
                    imagePreviewContainer.classList.remove('hidden');
                    hideLoading(); 
                    identifyItemsFromMultipleImages();
                }
            } catch (error) {
                console.error("Fehler beim Lesen der Datei:", error);
                showError(translations[currentAppLanguage].errorReadingFile.replace('{fileName}', file.name).replace('{errorMessage}', error.message));
                if (filesProcessed === files.length && base64ImageObjects.length > 0) {
                     identifyItemsFromMultipleImages(); 
                } else if (base64ImageObjects.length === 0) {
                    hideLoading(); 
                }
                return; 
            }
        }
    });

    // Reads a file and returns its Data URL representation
    function readFileAsDataURL(file) { 
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = (error) => reject(error);
            reader.readAsDataURL(file);
        });
    }

    // Extracts MIME type and base64 data from a Data URL
    function extractBase64Data(dataUrl) { 
         const match = dataUrl.match(/^data:(.+);base64,(.+)$/);
        if (match && match.length === 3) {
            return { mimeType: match[1], data: match[2] };
        }
        return { mimeType: null, data: null }; 
    }

    // Resets the UI to its initial state when new images are uploaded or language changes significantly
    function resetUIForNewImage() { 
        imagePreviewContainer.classList.add('hidden');
        imagePreviewGrid.innerHTML = '';
        identifiedItemsContainer.classList.add('hidden');
        aiPriceSuggestionContainer.classList.add('hidden'); 
        adContainer.classList.add('hidden');
        alternativeTitlesContainer.classList.add('hidden');
        alternativeTitlesList.innerHTML = '';
        keywordsContainer.classList.add('hidden');
        keywordsText.innerHTML = '';
        
        statusMessage.textContent = '';
        statusMessage.classList.remove('text-red-500');
        loadingSpinner.classList.add('hidden');
        
        base64ImageObjects = [];
        currentIdentifiedItems = "";
        adHistory = [];
        currentAdHistoryIndex = -1;
        updateAdNavigationButtons(); 
    }

    // Shows a loading message and spinner
    function showLoading(message, stage = "initial") { 
        statusMessage.textContent = message;
        statusMessage.classList.remove('text-red-500');
        loadingSpinner.classList.remove('hidden');

        if (stage === "initial") {
            identifiedItemsContainer.classList.add('hidden');
            aiPriceSuggestionContainer.classList.add('hidden');
            adContainer.classList.add('hidden');
            alternativeTitlesContainer.classList.add('hidden');
            keywordsContainer.classList.add('hidden');
        } else if (stage === "price") {
            aiPriceSuggestionContainer.classList.add('hidden');
            adContainer.classList.add('hidden');
            alternativeTitlesContainer.classList.add('hidden');
            keywordsContainer.classList.add('hidden');
        } else if (stage === "ad_creative" || stage === "titles" || stage === "keywords") { 
            // For these stages, we don't hide already displayed content like the ad itself
        } else if (stage === "ad") { 
            adContainer.classList.add('hidden'); 
            alternativeTitlesContainer.classList.add('hidden');
            keywordsContainer.classList.add('hidden');
        }
    }

    // Hides the loading spinner
    function hideLoading() { 
        loadingSpinner.classList.add('hidden');
    }

    // Displays an error message
    function showError(message) { 
        let displayMessage = `${translations[currentAppLanguage].errorPrefix}${message}`;
         // Append more specific advice based on error content
         if (message && message.toLowerCase().includes("internal server error")) {
            displayMessage += "\nDies ist oft ein serverseitiges Problem beim API Anbieter. Bitte versuchen Sie es sp√§ter erneut oder √ºberpr√ºfen Sie Ihren API-Schl√ºssel und den API-Status.";
        } else if (message && (message.toLowerCase().includes("api key") || message.toLowerCase().includes("api-schl√ºssel") || message.toLowerCase().includes("authentication") || message.toLowerCase().includes("unauthorized"))) {
            displayMessage += "\nBitte √ºberpr√ºfen Sie Ihren API-Schl√ºssel im Skript.";
        } else if (message && (message.toLowerCase().includes("unsupported image") || message.toLowerCase().includes("invalid_image_format") || message.toLowerCase().includes("invalid image format"))) {
            displayMessage += "\nDas Bildformat wird vom aktuellen KI-Modell m√∂glicherweise nicht unterst√ºtzt oder konnte nicht verarbeitet werden. Versuchen Sie g√§ngige Formate wie PNG, JPEG, WEBP oder GIF.";
        }
        statusMessage.textContent = displayMessage;
        statusMessage.classList.add('text-red-500');
        loadingSpinner.classList.add('hidden');
    }

    // Shows a short-lived toast notification
    function showToast(messageKey) { 
        toastNotification.textContent = translations[currentAppLanguage][messageKey] || messageKey;
        toastNotification.classList.add('show');
        setTimeout(() => {
            toastNotification.classList.remove('show');
        }, 3000);
    }

    // Makes a call to the Google Gemini API
    async function callGoogleGeminiAPI(payloadContents, model = GOOGLE_GEMINI_MODEL, expectJson = false) { 
        if (GOOGLE_API_KEY === "YOUR_GOOGLE_API_KEY") {
             throw new Error("Google API Key nicht konfiguriert."); // This should be translated if shown to user directly
        }
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${GOOGLE_API_KEY}`;
        const payload = { contents: payloadContents };
        if (expectJson) {
            payload.generationConfig = { responseMimeType: "application/json" };
        }
        
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (!response.ok) {
                const errorResult = await response.json();
                console.error("Google Gemini API Error Response:", errorResult);
                throw new Error(errorResult.error?.message || `API-Anfrage fehlgeschlagen mit Status ${response.status}`);
            }
            const result = await response.json();
            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                return result.candidates[0].content.parts[0].text;
            } else {
                if (result.candidates && result.candidates.length > 0 && result.candidates[0].finishReason === "SAFETY") {
                    console.warn("Google Gemini API: Content blocked due to safety ratings.", result.candidates[0].safetyRatings);
                    throw new Error("Inhalt aufgrund von Sicherheitsrichtlinien blockiert."); // Translate this
                }
                console.error("Unerwartete Google Gemini API-Antwortstruktur:", result);
                throw new Error("Unerwartete Antwortstruktur von Google Gemini erhalten."); // Translate this
            }
        } catch (error) {
            console.error("Fehler beim Aufruf der Google Gemini API:", error);
            throw error;
        }
    }

    // Identifies items from the uploaded images using the AI
    async function identifyItemsFromMultipleImages() {
        if (base64ImageObjects.length === 0) {
            showError(translations[currentAppLanguage].errorNoImagesToAnalyze);
            return;
        }
        showLoading(translations[currentAppLanguage].statusIdentifyingItems.replace('{count}', base64ImageObjects.length), "initial");

        // Use currentAppLanguage for the item identification prompt language
        const parts = [{ text: translations[currentAppLanguage].promptIdentifyItems }]; 
        base64ImageObjects.forEach(imgObj => { 
            parts.push({ inlineData: { mimeType: imgObj.mimeType, data: imgObj.data } });
        });
        const payloadContents = [{ role: "user", parts: parts }];

        try {
            const identifiedText = await callGoogleGeminiAPI(payloadContents, GOOGLE_GEMINI_MODEL); 
            if (!identifiedText || identifiedText.trim() === "") {
                // This message is internal, use a key if it needs to be shown directly
                currentIdentifiedItems = "Konnte keine spezifischen Gegenst√§nde identifizieren. Bitte versuchen Sie es mit anderen Bildern oder einer genaueren Beschreibung."; 
            } else {
                currentIdentifiedItems = identifiedText;
            }
            identifiedItemsText.textContent = currentIdentifiedItems; 
            identifiedItemsContainer.classList.remove('hidden');
            statusMessage.textContent = translations[currentAppLanguage].statusItemsIdentified;
            hideLoading();
            suggestPriceForIdentifiedItems(); 
        } catch (error) {
            showError(error.message || translations[currentAppLanguage].errorImageIdentification);
            currentIdentifiedItems = translations[currentAppLanguage].errorImageIdentification; 
            identifiedItemsText.textContent = currentIdentifiedItems;
            identifiedItemsContainer.classList.remove('hidden'); 
            hideLoading();
        }
    }

    // Suggests a price for the identified items using the AI
    async function suggestPriceForIdentifiedItems() {
        if (!currentIdentifiedItems || currentIdentifiedItems.includes(translations[currentAppLanguage].errorImageIdentification.split(": ")[1]) || currentIdentifiedItems.includes("Konnte keine spezifischen Gegenst√§nde identifizieren")) {
            showError(translations[currentAppLanguage].errorNoItemsForPrice);
            aiPriceSuggestionText.textContent = translations[currentAppLanguage].errorPriceSuggestionNotPossible;
            aiPriceSuggestionContainer.classList.remove('hidden');
            generateEbayAd(translations[currentAppLanguage].genericAdItems, false); 
            return;
        }
        showLoading(translations[currentAppLanguage].statusSuggestingPrice, "price");
        aiPriceSuggestionContainer.classList.add('hidden'); 

        // Use currentAppLanguage for the price suggestion prompt language
        const prompt = translations[currentAppLanguage].promptSuggestPrice.replace('{items}', currentIdentifiedItems); 
        const payloadContents = [{ role: "user", parts: [{text: prompt}] }];

        try {
            const suggestedPrice = await callGoogleGeminiAPI(payloadContents, GOOGLE_GEMINI_MODEL); 
            aiPriceSuggestionText.textContent = suggestedPrice; 
            aiPriceSuggestionContainer.classList.remove('hidden');
            statusMessage.textContent = translations[currentAppLanguage].statusPriceSuggested;
            hideLoading();
            // Generate ad using the currentAiContentLanguage
            generateEbayAd(currentIdentifiedItems, false); 
        } catch (error) {
            showError(error.message || translations[currentAppLanguage].errorPriceSuggestionFailed);
            aiPriceSuggestionText.textContent = "Preisvorschlag konnte nicht ermittelt werden."; 
            aiPriceSuggestionContainer.classList.remove('hidden'); 
            hideLoading();
            if (currentIdentifiedItems) { 
                statusMessage.textContent = translations[currentAppLanguage].errorPriceSuggestionFailed + " " + translations[currentAppLanguage].statusGeneratingAd.split("...")[1]; 
                generateEbayAd(currentIdentifiedItems, false);
            }
        }
    }

    // Displays an ad from the adHistory based on currentAdHistoryIndex
    function displayAdFromHistory() { 
        if (currentAdHistoryIndex >= 0 && currentAdHistoryIndex < adHistory.length) {
            const ad = adHistory[currentAdHistoryIndex];
            adTitleInput.value = ad.title;
            adBodyTextarea.value = ad.body;
            adContainer.classList.remove('hidden'); 
        } else if (adHistory.length === 0) { 
            adTitleInput.value = "";
            adBodyTextarea.value = "";
        }
        updateAdNavigationButtons();
    }

    // Updates the state and text of ad navigation buttons
    function updateAdNavigationButtons() { 
        const baseText = translations[currentAppLanguage].versionInfoBase || "Version";
        if (adHistory.length === 0) {
            adVersionInfo.textContent = `${baseText} 0/0`;
        } else {
            adVersionInfo.textContent = `${baseText} ${currentAdHistoryIndex + 1}/${adHistory.length}`;
        }
        previousAdVersionBtn.disabled = currentAdHistoryIndex <= 0;
        nextAdVersionBtn.disabled = currentAdHistoryIndex >= adHistory.length - 1;
    }
    
    // Cleans the JSON string received from AI, removing markdown code blocks
    function cleanJsonString(str) { 
        console.log("Original adJsonText from API:", str);
        let cleanedStr = str.trim();
        const jsonRegex = /```(?:json)?\s*([\s\S]+?)\s*```/;
        const match = cleanedStr.match(jsonRegex);

        if (match && match[1]) {
            cleanedStr = match[1].trim();
        }
        console.log("Cleaned adJsonText for parsing:", cleanedStr);
        return cleanedStr;
    }

    // Generates an eBay ad (standard or creative) using the AI
    async function generateEbayAd(items, creative = false) {
        if (!items || items.trim() === "" || items.includes(translations[currentAppLanguage].errorImageIdentification.split(": ")[1]) || items.includes("Konnte keine spezifischen Gegenst√§nde identifizieren")) {
            showError(translations[currentAppLanguage].errorNoItemsForAd);
            adTitleInput.value = translations[currentAppLanguage].errorPrefix + "Keine Artikelbeschreibung";
            adBodyTextarea.value = "Bitte laden Sie Bilder hoch, damit Artikel erkannt und eine Anzeige erstellt werden kann.";
            adContainer.classList.remove('hidden');
            updateAdNavigationButtons();
            return;
        }

        showLoading(creative ? translations[currentAppLanguage].statusGeneratingCreativeAd : translations[currentAppLanguage].statusGeneratingAd, creative ? "ad_creative" : "ad");

        let promptKey = creative ? "promptGenerateCreativeAd" : "promptGenerateAd";
        // Use currentAiContentLanguage for the ad generation prompts
        let prompt = translations[currentAiContentLanguage][promptKey].replace('{items}', items); 
        
        const payloadContents = [{ role: "user", parts: [{text: prompt}] }];

        try {
            let adJsonText = await callGoogleGeminiAPI(payloadContents, GOOGLE_GEMINI_MODEL, true); 
            console.log("[DEBUG] Raw response for ad generation:", adJsonText);
            adJsonText = cleanJsonString(adJsonText); 
            console.log("[DEBUG] Cleaned response for ad generation:", adJsonText);

            try { 
                let parsedObject = JSON.parse(adJsonText);
                let adObjectToUse = parsedObject;

                if (Array.isArray(parsedObject) && parsedObject.length > 0) {
                    console.log("[DEBUG] API returned an array of ads, using the first one.");
                    adObjectToUse = parsedObject[0]; 
                } else if (Array.isArray(parsedObject) && parsedObject.length === 0) {
                    throw new Error("API returned an empty array for ad suggestions.");
                }
                if (typeof adObjectToUse !== 'object' || adObjectToUse === null) {
                    throw new Error("Parsed ad data is not a valid object.");
                }

                console.log("[DEBUG] Ad object to use for ad generation:", adObjectToUse);
                const newTitle = adObjectToUse.titel || ""; 
                const newBody = adObjectToUse.anzeigentext || "";

                if (newTitle.trim() === "" && newBody.trim() === "") {
                    const failMessageKey = creative ? "errorEmptyCreativeAdResponse" : "errorEmptyAdResponse";
                    statusMessage.textContent = translations[currentAppLanguage][failMessageKey];
                    console.warn("AI returned empty title and body after parsing.");
                    if (adHistory.length > 0 && currentAdHistoryIndex >= 0 && currentAdHistoryIndex < adHistory.length && adHistory[currentAdHistoryIndex]) {
                        displayAdFromHistory(); 
                    } else { 
                        adTitleInput.value = translations[currentAppLanguage].errorPrefix + "Leere Antwort von KI"; 
                        adBodyTextarea.value = "Die KI konnte keinen Titel oder Text f√ºr die Anzeige generieren."; 
                        adContainer.classList.remove('hidden'); 
                        updateAdNavigationButtons(); 
                    }
                } else { 
                    if (creative && adHistory.length > 0 && currentAdHistoryIndex === adHistory.length - 1) {
                        const lastAd = adHistory[currentAdHistoryIndex];
                        if (lastAd.title === newTitle && lastAd.body === newBody) {
                            statusMessage.textContent = translations[currentAppLanguage].errorSimilarCreativeAd;
                            console.warn("New creative ad is identical to the last one.");
                            displayAdFromHistory(); 
                            hideLoading();
                            return; 
                        }
                    }
                    
                    const newAd = {
                        title: newTitle,
                        body: newBody
                    };
                    
                    adHistory.push(newAd);
                    currentAdHistoryIndex = adHistory.length - 1;
                    displayAdFromHistory(); 
                    
                    statusMessage.textContent = creative ? translations[currentAppLanguage].statusCreativeAdGenerated : translations[currentAppLanguage].statusAdGenerated;
                }
            } catch (parseError) { 
                console.error("Fehler beim Parsen des JSON f√ºr die Anzeige:", parseError, "\nBereinigter Text:", adJsonText);
                const formatErrorMessageKey = creative ? "errorAdFormatCreative" : "errorAdFormat";
                 statusMessage.textContent = translations[currentAppLanguage][formatErrorMessageKey];
                if (adHistory.length > 0 && currentAdHistoryIndex >= 0 && currentAdHistoryIndex < adHistory.length && adHistory[currentAdHistoryIndex]) {
                    displayAdFromHistory(); 
                } else {
                    adTitleInput.value = translations[currentAppLanguage].errorPrefix + "Formatierungsfehler im Titel"; 
                    adBodyTextarea.value = "Konnte die Anzeige nicht korrekt formatieren. Rohtext:\n\n" + adJsonText; 
                    adContainer.classList.remove('hidden'); 
                    updateAdNavigationButtons(); 
                }
            }
        } catch (error) { 
            const apiErrorMessage = error.message || translations[currentAppLanguage].errorAdGeneration;
            showError(creative ? apiErrorMessage + " " + translations[currentAppLanguage].errorEmptyCreativeAdResponse.split(". ")[1] : apiErrorMessage); 
            if (adHistory.length > 0 && currentAdHistoryIndex >= 0 && currentAdHistoryIndex < adHistory.length && adHistory[currentAdHistoryIndex]) {
                 displayAdFromHistory();
            } else {
                adTitleInput.value = translations[currentAppLanguage].errorPrefix + "Fehler bei Titelgenerierung"; 
                adBodyTextarea.value = translations[currentAppLanguage].errorPrefix + "Fehler bei Anzeigenerstellung: " + apiErrorMessage; 
                adContainer.classList.remove('hidden'); 
                updateAdNavigationButtons();
            }
        } finally {
            hideLoading();
        }
    }

    // --- Suggest Alternative Titles ---
    suggestTitlesBtn.addEventListener('click', async () => {
        if (!currentIdentifiedItems || currentIdentifiedItems.startsWith("Konnte keine") || currentIdentifiedItems.startsWith("Fehler bei")) {
            showError(translations[currentAppLanguage].errorNoItemsForAd.replace("Anzeigenerstellung", "Titelvorschl√§ge"));
            return;
        }
        if (adHistory.length === 0 || currentAdHistoryIndex < 0) {
            showError(translations[currentAppLanguage].errorNoAdForTitles);
            return;
        }

        const currentAd = adHistory[currentAdHistoryIndex];
        showLoading(translations[currentAppLanguage].statusSuggestingTitles, "titles");
        alternativeTitlesList.innerHTML = ''; 
        alternativeTitlesContainer.classList.add('hidden');

        const prompt = translations[currentAiContentLanguage].promptSuggestTitles 
            .replace('{items}', currentIdentifiedItems)
            .replace('{currentTitle}', currentAd.title);
        const payloadContents = [{ role: "user", parts: [{text: prompt}] }];

        try {
            const titlesText = await callGoogleGeminiAPI(payloadContents, GOOGLE_GEMINI_MODEL);
            const titlesArray = titlesText.split('\n').map(t => t.trim()).filter(t => t.length > 0 && t.length <= 65);

            if (titlesArray.length > 0) {
                titlesArray.forEach(title => {
                    const li = document.createElement('li');
                    li.textContent = title;
                    li.classList.add('p-1', 'hover:bg-blue-100', 'cursor-pointer', 'rounded');
                    li.onclick = () => {
                        adTitleInput.value = title;
                        if (adHistory[currentAdHistoryIndex]) {
                            adHistory[currentAdHistoryIndex].title = title;
                        }
                        alternativeTitlesContainer.classList.add('hidden'); 
                        showToast("toastTitleUpdated");
                    };
                    alternativeTitlesList.appendChild(li);
                });
                alternativeTitlesContainer.classList.remove('hidden');
                statusMessage.textContent = translations[currentAppLanguage].statusTitlesSuggested;
            } else {
                statusMessage.textContent = translations[currentAppLanguage].statusNoAlternativeTitles;
            }
        } catch (error) {
            showError(error.message || translations[currentAppLanguage].errorSuggestingTitles);
        } finally {
            hideLoading();
        }
    });

    // --- Suggest Keywords & Hashtags ---
    suggestKeywordsBtn.addEventListener('click', async () => {
        if (adHistory.length === 0 || currentAdHistoryIndex < 0) {
            showError(translations[currentAppLanguage].errorNoAdForKeywords);
            return;
        }
        const currentAd = adHistory[currentAdHistoryIndex];
        if (!currentAd.title || !currentAd.body) {
             showError(translations[currentAppLanguage].errorNoAdContentForKeywords);
            return;
        }

        showLoading(translations[currentAppLanguage].statusSuggestingKeywords, "keywords");
        keywordsText.innerHTML = '';
        keywordsContainer.classList.add('hidden');

        const prompt = translations[currentAiContentLanguage].promptSuggestKeywords 
            .replace('{title}', currentAd.title)
            .replace('{body}', currentAd.body);
        const payloadContents = [{ role: "user", parts: [{text: prompt}] }];
        
        try {
            const suggestions = await callGoogleGeminiAPI(payloadContents, GOOGLE_GEMINI_MODEL);
            keywordsText.textContent = suggestions;
            keywordsContainer.classList.remove('hidden');
            statusMessage.textContent = translations[currentAppLanguage].statusKeywordsSuggested;
        } catch (error) {
            showError(error.message || translations[currentAppLanguage].errorSuggestingKeywords);
        } finally {
            hideLoading();
        }
    });
    
    // Event listener for "New Creative Version" button
    regenerateAdCreativeBtn.addEventListener('click', () => {
        if (!currentIdentifiedItems || currentIdentifiedItems.startsWith("Konnte keine") || currentIdentifiedItems.startsWith("Fehler bei")) {
            showError(translations[currentAppLanguage].errorNoItemsForAd.replace("Anzeigenerstellung", "kreative Version"));
            return;
        }
        regenerateAdCreativeBtn.disabled = true; 
        generateEbayAd(currentIdentifiedItems, true).finally(() => {
            regenerateAdCreativeBtn.disabled = false; 
        }); 
    });

    // Event listener for "Previous Version" button
    previousAdVersionBtn.addEventListener('click', () => {
        if (currentAdHistoryIndex > 0) {
            currentAdHistoryIndex--;
            displayAdFromHistory();
        }
    });

    // Event listener for "Next Version" button
    nextAdVersionBtn.addEventListener('click', () => {
        if (currentAdHistoryIndex < adHistory.length - 1) {
            currentAdHistoryIndex++;
            displayAdFromHistory();
        }
    });

    // Event listener for "Copy Ad" button
    copyAdButton.addEventListener('click', () => {
        const title = adTitleInput.value;
        const body = adBodyTextarea.value;
        const suggestedPriceInfo = aiPriceSuggestionText.textContent ? `\n\nPreisvorstellung (basierend auf KI-Analyse): ${aiPriceSuggestionText.textContent}` : "";
        const suggestedKeywords = keywordsText.textContent ? `\n\nKeywords/Hashtags:\n${keywordsText.textContent}` : "";
        const fullAdText = `Titel: ${title}\n\n${body}${suggestedPriceInfo}${suggestedKeywords}`;
        
        const tempTextArea = document.createElement('textarea');
        tempTextArea.value = fullAdText;
        document.body.appendChild(tempTextArea);
        tempTextArea.select();
        try {
            const successful = document.execCommand('copy');
            showToast(successful ? "toastAdCopied" : "toastCopyFailed");
        } catch (err) {
            showToast("toastCopyFailed");
            console.error('Fallback: Oops, unable to copy', err);
        }
        document.body.removeChild(tempTextArea);
    });

    // Initial language setup on page load
    const savedAppLang = localStorage.getItem('appLanguage');
    if (savedAppLang && translations[savedAppLang]) {
        setAppLanguage(savedAppLang);
    } else {
        setAppLanguage('de'); 
    }
    const savedAiContentLang = localStorage.getItem('aiContentLanguage');
    if (savedAiContentLang && translations[savedAiContentLang]) {
        setAiContentLanguage(savedAiContentLang);
    } else {
        setAiContentLanguage(currentAppLanguage); // Default AI content language to current app language
    }